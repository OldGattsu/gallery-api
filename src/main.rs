use gallery::{create_router, AppConfig};
use tower::ServiceBuilder;
use tower_http::{
    cors::{Any, CorsLayer},
    trace::TraceLayer,
};
use tracing_subscriber;

#[tokio::main]
async fn main() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    tracing_subscriber::fmt::init();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    if let Err(e) = dotenvy::dotenv() {
        tracing::info!("‚ÑπÔ∏è  No .env file found or error loading it: {}", e);
        tracing::info!("   Using system environment variables only");
    } else {
        tracing::info!("‚úÖ Loaded .env file successfully");
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    let config = match AppConfig::from_env() {
        Ok(config) => {
            tracing::info!("‚úÖ Configuration loaded successfully");
            tracing::info!("  YANDEX_DISK_API_URL: {}", config.yandex_disk_api_url);
            tracing::info!("  SERVER_PORT: {}", config.server_port);
            config
        }
        Err(e) => {
            tracing::error!("‚ùå Failed to load configuration: {}", e);
            tracing::error!("Please set YANDEX_DISK_TOKEN environment variable");
            std::process::exit(1);
        }
    };

    // –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    let app = create_router(config.clone()).layer(
        ServiceBuilder::new()
            .layer(TraceLayer::new_for_http())
            .layer(
                CorsLayer::new()
                    .allow_origin(Any)
                    .allow_methods(Any)
                    .allow_headers(Any),
            ),
    );

    // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    let bind_address = format!("0.0.0.0:{}", config.server_port);
    let listener = tokio::net::TcpListener::bind(&bind_address)
        .await
        .expect("Failed to bind to address");

    tracing::info!("üöÄ Server running on http://{}", bind_address);
    tracing::info!("üìö API Documentation:");
    tracing::info!("  GET  /           - Welcome message");
    tracing::info!("  GET  /health     - Health check");
    tracing::info!("  GET  /files      - Get files from Yandex Disk");

    axum::serve(listener, app)
        .await
        .expect("Failed to start server");
}